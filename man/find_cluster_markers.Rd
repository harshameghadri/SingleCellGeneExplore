% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_and_print_marker_genes.R
\name{find_cluster_markers}
\alias{find_cluster_markers}
\title{Find Marker Genes for Seurat Clusters (with Optional Parallel Execution)}
\usage{
find_cluster_markers(
  seurat_object,
  assay_name = "RNA",
  cluster_column = "seurat_clusters",
  logfc_threshold = 0.1,
  min_pct = 0.25,
  only_pos = TRUE,
  parallel = FALSE,
  num_cores = NULL,
  output_file = NULL,
  assign_to_env = FALSE
)
}
\arguments{
\item{seurat_object}{A Seurat object containing single-cell data.}

\item{assay_name}{Character string. The name of the assay to use for finding
markers (e.g., "RNA", "SCT"). Default is \code{"RNA"}.}

\item{cluster_column}{Character string. The name of the metadata column in
\code{seurat_object@meta.data} that contains the cluster assignments to use for
identity. Default is \code{"seurat_clusters"}.}

\item{logfc_threshold}{Numeric. Limit testing to genes which show, on average,
at least X-fold difference (log-scale) between the two groups of cells.
Default is \code{0.1}.}

\item{min_pct}{Numeric. Only test genes that are detected in a minimum fraction
of cells in either of the two populations. Default is \code{0.25}.}

\item{only_pos}{Logical. If \code{TRUE}, only return positive markers (genes more
highly expressed in the cluster of interest). Default is \code{TRUE}.}

\item{parallel}{Logical. If \code{TRUE}, attempts to run the marker finding process
in parallel across clusters using a socket cluster from the \code{parallel} package.
Default is \code{FALSE}.}

\item{num_cores}{Optional. Numeric. The number of cores to use if \code{parallel = TRUE}.
If \code{NULL} (default) when \code{parallel = TRUE}, it attempts to use
\code{parallel::detectCores() - 1} cores, ensuring at least 1 core is used.
Ignored if \code{parallel = FALSE}.}

\item{output_file}{Optional. Character string. If provided, the path to save
the resulting marker table as a tab-separated file. If \code{NULL} (default),
the table is not saved to a file by the function.}

\item{assign_to_env}{Logical. If \code{TRUE}, the resulting markers data frame is
assigned to the variable name \code{markers_table} in the global environment
(\code{.GlobalEnv}). Default is \code{FALSE} to avoid cluttering the global namespace.}
}
\value{
A data frame containing marker genes for all clusters, typically ordered
by significance within each cluster group by \code{Seurat::FindMarkers}. Includes
columns like \code{p_val}, \code{avg_log2FC}, \code{pct.1}, \code{pct.2}, \code{p_val_adj},
\code{gene} (gene symbol), and \code{cluster} (the cluster ID). Returns an empty
data frame if no markers are found.
}
\description{
Identifies marker genes for each cluster specified in a Seurat object using
the \code{Seurat::FindMarkers} function. It iterates through each cluster, finds
markers comparing that cluster against all others, and compiles the results
into a single data frame. Supports parallel execution across clusters for
improved performance on multi-core machines (works on Windows, macOS, Linux).
}
\details{
This function sets the default assay and identity (\code{Idents}) of the Seurat
object based on the \code{assay_name} and \code{cluster_column} parameters, respectively.
It then iterates through each cluster level defined in \code{Idents(seurat_object)}.
For each cluster, it calls \code{Seurat::FindMarkers} with the specified parameters
(\code{logfc_threshold}, \code{min_pct}, \code{only_pos}).

Parallel execution, if enabled (\code{parallel = TRUE}), uses the \code{parallel} package
to create and manage a socket cluster, distributing tasks across cores.

The results for all clusters are combined into a single data frame. If an
\code{output_file} path is provided, this data frame is saved as a tab-separated file.
If \code{assign_to_env = TRUE}, the resulting markers data frame is also assigned
to the variable \code{markers_table} in the global environment.
}
\examples{
\dontrun{
# This example requires the Seurat package.
# install.packages("Seurat")
# library(Seurat)
# library(parallel) # Needed for parallel execution functionality
# library(dplyr) # Needed by print_markers helper

# Create a dummy Seurat object for demonstration
counts <- matrix(rpois(10000, lambda = 1), nrow = 100, ncol = 100)
rownames(counts) <- paste0("Gene", 1:100)
colnames(counts) <- paste0("Cell", 1:100)
seu_obj <- CreateSeuratObject(counts = counts)
seu_obj@meta.data$seurat_clusters <- factor(sample(0:2, 100, replace = TRUE))
seu_obj <- NormalizeData(seu_obj, verbose = FALSE)

# --- Find markers (Sequential, no global assignment) ---
marker_results <- find_cluster_markers(
  seurat_object = seu_obj,
  parallel = FALSE,
  assign_to_env = FALSE # Default, explicit here
)
head(marker_results)

# --- Find markers (Parallel, assign to global env) ---
# available_cores <- parallel::detectCores()
# cores_to_use <- if(available_cores > 1) 2 else 1
# find_cluster_markers(
#  seurat_object = seu_obj,
#  parallel = TRUE,
#  num_cores = cores_to_use,
#  assign_to_env = TRUE, # Assigns to markers_table globally
#  output_file = file.path(tempdir(), "parallel_markers.tsv")
# )
# Does markers_table exist globally now?
# if(exists("markers_table")) head(markers_table)
}
\dontrun{
# Assume 'marker_results' is a data frame from find_cluster_markers()
# (See example in find_cluster_markers documentation)
# library(dplyr) # Ensure dplyr is loaded if running example standalone

# Check if marker_results exists and has data
# if (exists("marker_results") && nrow(marker_results) > 0) {
#
#   # --- Recommended Usage: Pass cluster_id as character string ---
#   # This handles simple numeric names ("0", "1") and complex names ("0_1", "T_cells") robustly.
#
#   # Print top 10 markers for cluster "0"
#   print("Top 10 markers for cluster '0':")
#   print_markers(marker_table = marker_results, cluster_id = "0", n_genes = 10)
#
#   # Print top 5 markers for cluster "1"
#   print("Top 5 markers for cluster '1':")
#   print_markers(marker_table = marker_results, cluster_id = "1", n_genes = 5)
#
#   # Example if a cluster was named "0_1"
#   # print_markers(marker_table = marker_results, cluster_id = "0_1", n_genes = 10)
#
# } else {
#  print("Marker results not available or empty.")
# }
#
# # If find_cluster_markers was run with assign_to_env = TRUE:
# if (exists("markers_table") && nrow(markers_table) > 0) {
#    print("Top 15 markers for cluster '0' from global markers_table:")
#    print_markers(markers_table, cluster_id = "0", n_genes = 15)
# }
}

}
\seealso{
\code{\link[Seurat]{FindMarkers}}, \code{\link[parallel]{makeCluster}}, \code{\link[parallel]{parLapply}}, \code{\link{print_markers}}
}
