% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_unified_pseudobulk_workflow.R
\name{run_unified_pseudobulk_workflow}
\alias{run_unified_pseudobulk_workflow}
\title{Unified Workflow for Pseudo-bulk Analysis from Seurat Object}
\usage{
run_unified_pseudobulk_workflow(
  seurat_obj,
  cell_type_column = "cell.type.ident",
  subject_column = "orig.ident",
  test_wilcox_fn = NULL,
  output_path = "./PseudoBulk_Workflow_Outputs",
  save_avg_exp_matrix = TRUE,
  avg_exp_matrix_filename = "average_expression_matrix.Rds",
  save_cell_type_tibbles = TRUE,
  cell_type_tibbles_filename = "cell_type_tibbles_list.Rds",
  save_wilcox_rds = TRUE,
  wilcox_rds_filename = "wilcox_results_list.Rds",
  save_wilcox_csv = TRUE,
  wilcox_csv_filename = "combined_wilcox_results.csv",
  save_wilcox_excel = TRUE,
  wilcox_excel_filename = "wilcox_results_by_celltype.xlsx",
  params_for_process_tibbles = list(user_suffix = "APS", verbose = TRUE, show_progress =
    TRUE)
)
}
\arguments{
\item{seurat_obj}{A Seurat object.}

\item{cell_type_column}{Character string. Metadata column for cell type identity.
Default is "cell.type.ident".}

\item{subject_column}{Character string. Metadata column for subject/sample identity.
This column should ideally combine condition and subject ID if they are separate
in the original metadata, e.g., "PAH_Subject1", "CTRL_Subject2", as the
\code{split_data_by_cell_type2_internal} function expects to parse condition from this.
Default is "orig.ident".}

\item{test_wilcox_fn}{A user-provided function (or NULL) that takes a single tibble
(as structured by \code{split_data_by_cell_type2_internal}) and returns a data frame
of statistical results. This function is applied per cell type.
If NULL (default), the internal \code{Test.wilcox.onAverage_internal} function will be used,
which compares "PAH" vs "CTRL" conditions defined in the 'disease' column
parsed by \code{split_data_by_cell_type2_internal}.
Default is NULL.}

\item{output_path}{Character string. Base directory path where all output files
will be saved. If NULL, files are saved in the current working directory.
Default is "./PseudoBulk_Workflow_Outputs".}

\item{save_avg_exp_matrix}{Logical. Whether to save the wide-format average
expression matrix (output of step 1) as an .Rds file. Default is TRUE.}

\item{avg_exp_matrix_filename}{Character string. Filename for the saved average
expression matrix .Rds file. Default is "average_expression_matrix.Rds".}

\item{save_cell_type_tibbles}{Logical. Whether to save the list of cell-type
specific long-format tibbles (output of step 2) as an .Rds file.
Default is TRUE.}

\item{cell_type_tibbles_filename}{Character string. Filename for the saved
list of tibbles .Rds file. Default is "cell_type_tibbles_list.Rds".}

\item{save_wilcox_rds}{Logical. Whether to save the final list of Wilcox/statistical
results (output of step 3) as an .Rds file. Default is TRUE.}

\item{wilcox_rds_filename}{Character string. Filename for the saved Wilcox results
.Rds file. Default is "wilcox_results_list.Rds".}

\item{save_wilcox_csv}{Logical. Whether to save the combined Wilcox/statistical
results as a single CSV file. Default is TRUE.}

\item{wilcox_csv_filename}{Character string. Filename for the saved combined
Wilcox results CSV file. Default is "combined_wilcox_results.csv".}

\item{save_wilcox_excel}{Logical. Whether to save the Wilcox/statistical results
to an Excel file, with each cell type's results on a separate sheet.
Default is TRUE.}

\item{wilcox_excel_filename}{Character string. Filename for the saved Wilcox
results Excel file. Default is "wilcox_results_by_celltype.xlsx".}

\item{params_for_process_tibbles}{List. A list of additional parameters to pass
to the \code{Process_tibbles_Calculate_average_wilcox_internal} function.
Example: \code{list(user_suffix = "MySuffix", verbose = TRUE, show_progress = TRUE)}.
The \code{tibble_list} and \code{test_wilcox_fn} are passed directly by the wrapper.
Default is \code{list(user_suffix = "APS", verbose = TRUE, show_progress = TRUE)}.}
}
\value{
A list containing the final statistical results (output of step 3),
invisibly. Paths to saved files are printed to the console.
}
\description{
This function orchestrates a multi-step workflow:
\enumerate{
\item Calculates average gene expression per celltype-subject combination.
(Uses rowMeans by default, with Seurat::AverageExpression as a fallback).
\item Splits this data into cell-type specific long-format tibbles.
\item Applies a user-defined statistical test to these tibbles. If no test
function is provided, it defaults to \code{Test.wilcox.onAverage_internal}.
It provides options to save intermediate and final results in various formats
(.Rds, CSV, Excel).
}
}
\examples{
\dontrun{
# Assume 'my_seurat_object' is loaded and preprocessed

# Create dummy Seurat object for example
if (requireNamespace("Seurat", quietly = TRUE) &&
    requireNamespace("SeuratObject", quietly = TRUE) &&
    requireNamespace("dplyr", quietly = TRUE) &&
    requireNamespace("stats", quietly = TRUE) &&
    requireNamespace("tibble", quietly = TRUE)) { 

  counts <- matrix(rpois(10000, lambda = 1), nrow = 100, ncol = 100)
  rownames(counts) <- paste0("Gene", 1:100)
  colnames(counts) <- paste0("Cell", 1:100)
  my_seurat_object <- Seurat::CreateSeuratObject(counts = counts)
  my_seurat_object$cell.type.ident <- sample(
    c("B_cell_long_name_example", "T_cell", "Macrophage_another_very_long_name"),
    100, replace = TRUE
  )
  my_seurat_object$orig.ident <- paste0(
    sample(c("PAH", "CTRL"), 100, replace = TRUE), "_",
    sample(paste0("S", 1:5), 100, replace = TRUE)
  )
  my_seurat_object <- Seurat::NormalizeData(my_seurat_object, verbose = FALSE)

  # Example 1: Using the default internal Wilcoxon test
  default_test_results <- run_unified_pseudobulk_workflow(
    seurat_obj = my_seurat_object,
    cell_type_column = "cell.type.ident",
    subject_column = "orig.ident",
    output_path = "./MyWorkflowOutput_DefaultTest_Fallback"
  )
  if(length(default_test_results) > 0 && !is.null(default_test_results[[1]])) {
    print(head(default_test_results[[1]]))
  }
}
}
}
