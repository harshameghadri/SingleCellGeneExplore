% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test_wilcox_on_average.R
\name{test_wilcox_on_average}
\alias{test_wilcox_on_average}
\alias{Test.wilcox.onAverage}
\title{Perform Wilcoxon Test and Calculate Fold Change on Averaged Expression Data}
\usage{
test_wilcox_on_average(data)

Test.wilcox.onAverage(data)
}
\arguments{
\item{data}{A data frame or tibble. It must contain at least the following columns:
\itemize{
\item \code{gene}: Identifier for the gene (or feature).
\item \code{average_expression}: Numeric values representing expression levels (e.g., averaged per sample or cell).
\item \code{disease}: A factor or character vector indicating the condition for each expression value,
expected to contain at least "PAH" and "CTRL".
}}
}
\value{
A tibble summarizing the results for each gene. The output tibble includes:
\itemize{
\item \code{gene}: The gene identifier.
\item \code{Average_PAH}: Mean of \code{average_expression} for the "PAH" group.
\item \code{Average_CTRL}: Mean of \code{average_expression} for the "CTRL" group.
\item \code{log2FoldChange}: Log2 ratio of \code{Average_PAH} / \code{Average_CTRL}.
\item \code{p_value}: Raw p-value from the Wilcoxon rank-sum test comparing "PAH" vs "CTRL".
\code{NA} if the test could not be performed (e.g., insufficient data in one group) or resulted in an error.
\item \code{adjusted_p_value.BH}: Benjamini-Hochberg adjusted p-value.
\item \code{adjusted_p_value.FDR}: Alias for Benjamini-Hochberg adjusted p-value (method = "fdr" is the same as "BH").
\item \code{adjusted_p_value.Bonferroni}: Bonferroni adjusted p-value.
}
The results are filtered to remove rows where \code{log2FoldChange} or \code{p_value} are \code{NA}, \code{NaN}, or infinite.
}
\description{
This function takes a data frame or tibble containing expression data, groups it by gene,
and then calculates the average expression for two specified conditions ("PAH" and "CTRL").
It computes the log2 fold change between these conditions, performs a Wilcoxon rank-sum test
(Mann-Whitney U test) to compare the expression distributions between the conditions for each gene,
and calculates adjusted p-values using various methods (BH, FDR, Bonferroni).
}
\details{
The function uses \code{dplyr} for data manipulation and \code{stats::wilcox.test} for the statistical test.
It assumes the \code{average_expression} column represents values suitable for direct comparison between
the "PAH" and "CTRL" groups within each \code{gene}.
The Wilcoxon test is performed using \code{exact = FALSE} for potentially faster computation with larger datasets,
enabling the use of normal approximation with continuity correction.
Error handling is included for the Wilcoxon test; if an error occurs (e.g., due to insufficient data points
or identical values in both groups), the \code{p_value} for that gene will be \code{NA}.
Note: The function name \code{Test.wilcox.onAverage} uses dots. Consider renaming using underscores
(\code{test_wilcox_on_average}) or camelCase (\code{testWilcoxOnAverage}) for better style consistency in packages.
}
\examples{
# --- Example Setup ---
# Create a dummy tibble mimicking scRNA-seq average expression data
set.seed(123)
n_genes <- 10
n_samples_pah <- 5
n_samples_ctrl <- 5
gene_names <- paste0("Gene", 1:n_genes)

dummy_data <- tibble::tibble(
  gene = rep(gene_names, each = n_samples_pah + n_samples_ctrl),
  disease = rep(c(rep("PAH", n_samples_pah), rep("CTRL", n_samples_ctrl)), times = n_genes),
  # Simulate some difference for the first few genes
  average_expression = rnorm(n_genes * (n_samples_pah + n_samples_ctrl),
                             mean = ifelse(gene \%in\% paste0("Gene", 1:3) & disease == "PAH", 5, 3),
                             sd = 1.5)
)
# Introduce some NAs or edge cases
dummy_data$average_expression[1] <- NA # NA value
dummy_data$average_expression[dummy_data$gene == "Gene5" & dummy_data$disease == "PAH"] <- 2 # Identical values
dummy_data$average_expression[dummy_data$gene == "Gene5" & dummy_data$disease == "CTRL"] <- 2 # Identical values
dummy_data <- dplyr::filter(dummy_data, !(gene == "Gene6" & disease == "CTRL")) # Missing group

print("Input Dummy Data (head):")
print(head(dummy_data))

# --- Run the function ---
results_table <- test_wilcox_on_average(dummy_data)

# --- View Results ---
print("Output Results Table:")
print(results_table)

# Check results for a specific gene where a difference was simulated
print("Results for Gene1:")
print(dplyr::filter(results_table, gene == "Gene1"))

# Check results for Gene5 (where Wilcox test might yield NA p-value due to identical values)
print("Results for Gene5:")
print(dplyr::filter(results_table, gene == "Gene5"))

# Check results for Gene6 (where one group was missing) - should be filtered out
print("Results for Gene6 (should be absent):")
print(dplyr::filter(results_table, gene == "Gene6"))

}
