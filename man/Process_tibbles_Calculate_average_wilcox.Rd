% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_tibbles_calculate_average_wilcox.R
\name{Process_tibbles_Calculate_average_wilcox}
\alias{Process_tibbles_Calculate_average_wilcox}
\title{Process a List of Tibbles, Apply a Function, and Optionally Save Results}
\usage{
Process_tibbles_Calculate_average_wilcox(
  tibble_list,
  user_suffix = "APS",
  save_name = "Results_list",
  save_path = NULL,
  test_wilcox_fn = Test.wilcox.onAverage,
  verbose = TRUE,
  show_progress = TRUE
)
}
\arguments{
\item{tibble_list}{A named list where each element is a tibble or data frame.
See details for requirements if using the default \code{test_wilcox_fn}.}

\item{user_suffix}{A character string suffix. Defaults to "APS".}

\item{save_name}{A character string for the saved RDS file name. Defaults to "Results_list".}

\item{save_path}{An optional character string directory path for saving. Defaults to NULL.}

\item{test_wilcox_fn}{A function to apply to each tibble. Defaults to
\code{Test.wilcox.onAverage}. Must accept a single tibble/data frame as input.}

\item{verbose}{Logical. If \code{TRUE} (default), print progress messages.}

\item{show_progress}{Logical. If \code{TRUE} (default), display progress bars. Requires 'progress'.}
}
\value{
Invisibly returns a named list of successfully computed results.
}
\description{
This function iterates through a named list of tibbles (or data frames). For each item,
it assigns the original tibble and the result of applying a user-provided function
(\code{test_wilcox_fn}) to the calling environment. It collects the results from
\code{test_wilcox_fn} into a list, which is returned invisibly and can optionally be
saved to an RDS file. By default, it uses the exported \code{Test.wilcox.onAverage} function
from this package for the analysis step.
}
\details{
\strong{Important Note on Side Effects:} This function assigns variables directly into the
calling environment (\code{parent.frame()}) using \code{assign()}. This includes the original
tibbles (with \code{user_suffix} appended to their names) and the results of the
\code{test_wilcox_fn} (with \code{.Average} further appended). Assigning to the parent
environment is generally discouraged in R package development. Consider modifying
the function to return all necessary outputs within a structured list.

The function performs these main steps:
\enumerate{
\item Validates inputs.
\item Iterates through \code{tibble_list}, assigning each tibble to \code{parent.frame()}
with the name \code{list_element_name.user_suffix}.
\item Iterates again, applying \code{test_wilcox_fn} (defaults to \code{Test.wilcox.onAverage})
to each tibble. Assigns the result to \code{parent.frame()} with the name
\code{list_element_name.user_suffix.Average}. Includes basic error handling.
\item Collects all successfully computed results into a list.
\item If \code{save_path} is provided, saves the results list as an RDS file.
\item Optionally displays progress bars and verbose messages.
}

\strong{Default Function:} The default function \code{Test.wilcox.onAverage} (exported by this
package) expects input tibbles/data frames with columns: \code{gene}, \code{average_expression},
and \code{disease} (containing exactly two levels, e.g., "PAH" and "CTRL").
}
\examples{
\dontrun{
# (Examples remain the same as in the previous artifact, they demonstrate
# calling with the default and with a custom function)

# --- Example Setup ---
set.seed(123)
make_dummy_tibble <- function(name_prefix, n_genes = 5, n_pah = 3, n_ctrl = 3) {
  gene_names <- paste0(name_prefix, "_Gene", 1:n_genes)
  tibble::tibble(
    gene = rep(gene_names, each = n_pah + n_ctrl),
    disease = rep(c(rep("PAH", n_pah), rep("CTRL", n_ctrl)), times = n_genes),
    average_expression = rnorm(n_genes * (n_pah + n_ctrl), mean = 5, sd = 1.5) +
                         ifelse(disease == "PAH", rnorm(n_genes * (n_pah + n_ctrl), 1, 0.5), 0)
  )
}
tibble1 <- make_dummy_tibble("SetA")
tibble2 <- make_dummy_tibble("SetB")
my_analysis_list <- list(Group1 = tibble1, Group2 = tibble2)

# --- Usage with Default Function ---
rm(list = ls(pattern = "\\\\.DefaultTest|\\\\.DefaultTest\\\\.Average"))
results_default <- Process_tibbles_Calculate_average_wilcox(
  tibble_list = my_analysis_list,
  user_suffix = "DefaultTest",
  verbose = TRUE, show_progress = FALSE
)
print(results_default)
print(ls(pattern = "\\\\.DefaultTest"))
print(head(Group1.DefaultTest.Average))
rm(list = ls(pattern = "\\\\.DefaultTest|\\\\.DefaultTest\\\\.Average"))

# --- Usage with Custom Function ---
simple_row_counter <- function(tb) { nrow(tb) }
rm(list = ls(pattern = "\\\\.CustomTest|\\\\.CustomTest\\\\.Average"))
results_custom <- Process_tibbles_Calculate_average_wilcox(
  tibble_list = my_analysis_list,
  user_suffix = "CustomTest",
  test_wilcox_fn = simple_row_counter,
  verbose = TRUE, show_progress = FALSE
)
print(results_custom)
print(ls(pattern = "\\\\.CustomTest"))
print(Group1.CustomTest.Average)
rm(list = ls(pattern = "\\\\.CustomTest|\\\\.CustomTest\\\\.Average"))

# --- Usage with Saving (using default function) ---
temp_dir <- tempdir()
results_saved <- Process_tibbles_Calculate_average_wilcox(
  tibble_list = my_analysis_list,
  user_suffix = "SaveRun",
  save_name = "DefaultWilcoxResults",
  save_path = temp_dir,
  verbose = FALSE
)
saved_file <- file.path(temp_dir, "DefaultWilcoxResults.Rds")
print(list.files(temp_dir, pattern = "DefaultWilcoxResults\\\\.Rds"))
saved_data <- readRDS(saved_file)
print(saved_data)
rm(list = ls(pattern = "\\\\.SaveRun"))
file.remove(saved_file)
}

}
